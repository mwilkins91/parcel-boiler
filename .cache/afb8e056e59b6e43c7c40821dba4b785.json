{"dependencies":[{"name":"./scss/styles.scss","dynamic":true},{"name":"./index.js","dynamic":true}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Mark's Onbrand Stuff</title>\n    <link rel=\"stylesheet\" href=\"/dist/995ca88ab200ef478d84ced549e11410.css\">\n</head>\n\n<body>\n    <section class=\"section\">\n        <div class=\"container\">\n            <h1 class=\"title\">Mark's Onbrand Projects</h1>\n            <h2 class=\"subtitle\">\n                Hopefully everything you might need to know or find about the stuff I've built.\n            </h2>\n            <section class=\"columns\">\n                <aside class=\" column menu\">\n                    <p class=\"menu-label\">\n                        Project Resources\n                    </p>\n                    <ul class=\"menu-list\">\n                        <li>\n                            <a class=\"inPageLink is-active\" data-for=\"repositories\">Repositories</a>\n                            <ul class=\"sub-menu\">\n                                <li>\n                                    <a href=\"#onbrandAssetObtainer-repositories\"> Asset Obtainer</a>\n                                    <a href=\"#onbrandUtilityFunctions-repositories\">Utility Functions</a>\n                                    <a href=\"#onbrandLocalDevelopmentFrameworks-repositories\">Local Development</a>\n                                    <a href=\"#onbrandProjectGenerator-repositories\">Project Generator</a>\n                                    <a href=\"#onbrandSlackBot-repositories\">Slack Bot</a>\n                                </li>\n                            </ul>\n                        </li>\n                        <li>\n                            <a class=\"inPageLink\" data-for=\"npmPage\">NPM</a>\n                            <ul style=\"display: none;\" class=\"sub-menu\">\n                                <li>\n                                    <a href=\"#onbrandAssetObtainer-npmPage\"> Asset Obtainer</a>\n                                    <a href=\"#onbrandUtilityFunctions-npmPage\">Utility Functions</a>\n                                    <a href=\"#onbrandProjectGenerator-npmPage\">Project Generator</a>\n                                </li>\n                            </ul>\n                        </li>\n                        <li>\n                            <a class=\"inPageLink\" data-for=\"docs\">Documentation</a>\n                            <ul style=\"display: none;\" class=\"sub-menu\">\n                                <li>\n                                    <a href=\"#onbrandAssetObtainer-docs\"> Asset Obtainer</a>\n                                    <a href=\"#onbrandUtilityFunctions-docs\">Utility Functions</a>\n                                    <a href=\"#onbrandLocalDevelopmentFrameworks-docs\">Local Development</a>\n                                    <a href=\"#onbrandProjectGenerator-docs\">Project Generator</a>\n                                    <a href=\"#onbrandSlackBot-docs\">Slack Bot</a>\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <p class=\"menu-label\">\n                        How To's\n                    </p>\n                    <ul class=\"menu-list\">\n                        <li>\n                            <a>Set up a new onbrand project</a>\n                        </li>\n                        <li>\n                            <a>Update a framework template</a>\n                        </li>\n                        <li>\n                            <a>Update Utility Functions</a>\n                        </li>\n                    </ul>\n                </aside>\n                <main class=\"column\">\n                    <article id=\"repositories\" class=\"content cardsList\">\n                        <ul>\n                            <li id=\"onbrandAssetObtainer-repositories\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Asset Obtainer</h4>\n                                    <p class=\"content\">\n                                        The repository for the program typically run via the \"steal\" command. Used to grab all styles from a particular website,\n                                        and save them in the appropriate order in your client.scss. It also attempts to prevent\n                                        conflits by namespacing.\n                                    </p>\n                                    <a href=\"https://github.com/mwilkins91/onbrand-assetObtainer\" class=\"block\">Github</a>\n                                </div>\n                            </li>\n                            <li id=\"onbrandUtilityFunctions-repositories\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Utility Functions</h4>\n                                    <p class=\"content\">\n                                        The repository for the library which houses various reusable fuctions that make Onbranding a hub much easier, and eliminates\n                                        various bugs. Also contains various SCSS functions.\n                                    </p>\n                                    <a href=\"https://github.com/mwilkins91/onbrand-utilityfunctions\" class=\"block\">Github</a>\n                                </div>\n                            </li>\n                            <li id=\"onbrandLocalDevelopmentFrameworks-repositories\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Local Development Frameworks</h4>\n                                    <p class=\"content\">\n                                        The two branches of this repository contain two different frameworks for developing hubs on a local machine. The master branch\n                                        is a gulp powered version, and the webpack branch is a webpack powered version. The\n                                        webpack version is the more user-friendly and stable of the two. The webpack version\n                                        makes extensive use of the\n                                        <a href=\"https://github.com/mwilkins91/onbrand-utilityfunctions\">Onbrand Utility Functions</a> Library.\n                                    </p>\n                                    <a href=\"https://github.com/mwilkins91/onbrand-localDev\" class=\"block\">Gulp: Github</a>\n                                    <a href=\"https://github.com/mwilkins91/onbrand-localDev/tree/webpack\" class=\"block\">Webpack: Github</a>\n                                    <a href=\"https://github.com/mwilkins91/onbrandTemplate-Nick\" class=\"block\">Original (Nick Roamer): Github</a>\n                                </div>\n                            </li>\n                            <li id=\"onbrandProjectGenerator-repositories\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Project Generator</h4>\n                                    <p class=\"content\">\n                                        This is the repository for the program which runs on cihost when you use the command \"generate\". It builds projects based\n                                        on what is in it's \"templates\" folder, which is typically the frameworks found in\n                                        the\n                                        <a href=\"https://github.com/mwilkins91/onbrand-generator\">local development frameworks</a>.\n                                    </p>\n                                    <a href=\"https://github.com/mwilkins91/onbrand-generator\" class=\"block\">Github</a>\n                                </div>\n                            </li>\n                            <li id=\"onbrandSlackBot-repositories\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Slack Bot</h4>\n                                    <p class=\"content\">\n                                        This is the repository for the onbrand Slackbot, which announces the fire marshal every morning, and it's associated website.\n                                        The repo is set to private to protect the api-keys.\n                                    </p>\n                                    <a href=\"https://github.com/mwilkins91/onbrand-firemarshal\" class=\"block\">Github</a>\n                                    <a href=\"http://cihost.uberflip.com/fire/\" class=\"block\">Scheduling Website</a>\n                                </div>\n                            </li>\n                        </ul>\n                    </article>\n                    <article id=\"npmPage\" style=\"display:none;\" class=\"content cardsList\">\n                        <ul>\n                            <li id=\"onbrandAssetObtainer-npmPage\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Asset Obtainer</h4>\n                                    <p class=\"content\">\n                                        The repository for the program typically run via the \"steal\" command. Used to grab all styles from a particular website,\n                                        and save them in the appropriate order in your client.scss. It also attempts to prevent\n                                        conflits by namespacing.\n                                    </p>\n                                    <a href=\"https://www.npmjs.com/package/onbrand-steal\" class=\"block\">NPM</a>\n                                </div>\n                            </li>\n                            <li id=\"onbrandUtilityFunctions-npmPage\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Utility Functions</h4>\n                                    <p class=\"content\">\n                                        The repository for the library which houses various reusable fuctions that make Onbranding a hub much easier, and eliminates\n                                        various bugs. Also contains various SCSS functions.\n                                    </p>\n                                    <a href=\"https://www.npmjs.com/package/onbrandutilityfunctions\" class=\"block\">NPM</a>\n                                </div>\n                            </li>\n                            <li id=\"onbrandProjectGenerator-npmPage\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Project Generator</h4>\n                                    <p class=\"content\">\n                                        This is the repository for the program which runs on cihost when you use the command \"generate\". It builds projects based\n                                        on what is in it's \"templates\" folder, which is typically the frameworks found in\n                                        the\n                                        <a href=\"https://github.com/mwilkins91/onbrand-generator\">local development frameworks</a>.\n                                    </p>\n                                    <a href=\"https://www.npmjs.com/package/onbrand-project-generator\" class=\"block\">NPM</a>\n                                </div>\n                            </li>\n                        </ul>\n                    </article>\n                    <article id=\"docs\" style=\"display:none;\" class=\"content cardsList\">\n                        <ul>\n                            <li class=\"card\">\n                                <div id=\"onbrandAssetObtainer-docs\" class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Asset Obtainer</h4>\n                                    <p class=\"content\">\n                                        The repository for the program typically run via the \"steal\" command. Used to grab all styles from a particular website,\n                                        and save them in the appropriate order in your client.scss. It also attempts to prevent\n                                        conflits by namespacing.\n                                    </p>\n                                    <p class=\"title is-5\">How it works:</p>\n                                    <p class=\"title is-6\">The main initialization function:</p>\n                                    <pre><code class=\"language-javascript\">\nasync function init() {\n    let confirmation = await checkLocation().catch(err =>\n        logError(err, 'checkLocation')\n    );\n    if (confirmation) {\n        const progressBar = new cliProgress.Bar(\n            {},\n            cliProgress.Presets.shades_classic\n        );\n        let url = await getinfo().catch(err => logError(err, 'getInfo'));\n        progressBar.start(100, 0);\n        progressBar.update(10);\n        let assets = await launchBrowser(url).catch(err =>\n            logError(err, 'launchBrowser')\n        );\n        progressBar.update(35);\n        let clientCss = await getCSS(assets.stylesheet).catch(err =>\n            logError(err, 'getCss')\n        );\n        progressBar.update(75);\n        let bundledCss = bundleCss(clientCss, assets.inlineStyles);\n        progressBar.update(85);\n        printCss(bundledCss, progressBar);\n    }\n}\n                                    </code></pre>\n                                    <p>Can be broken down as follows:</p>\n                                    <ol>\n                                        <li>\n                                            <p>A user enter's\n                                                <code>generate</code> in thier terminal.</p>\n                                        </li>\n                                        <li>\n                                            <p>A check is done to ensure we are in an onbrand folder. We are.\n                                                <a href=\"https://www.npmjs.com/package/inquirer\">\n                                                    <code>Inquirer</code>\n                                                </a> is used to prompt the user for confirmation of their intent (to overwrite\n                                                their client.scss). User confirms.</p>\n                                            <pre><code class=\"language-javascript\">\nlet confirmation = await checkLocation().catch(err =>\n    logError(err, 'checkLocation')\n);\n                                                            </code></pre>\n                                        </li>\n                                        <li>\n                                            <p>\n                                                <a href=\"https://www.npmjs.com/package/inquirer\">\n                                                    <code>Inquirer</code>\n                                                </a> is used to prompt the user for a URL.\n                                            </p>\n                                            <pre><code class=\"language-javascript\">\nlet url = await getinfo().catch(err => logError(err, 'getInfo'));\n                                                </code></pre>\n                                        </li>\n                                        <li>\n                                            <p>\n                                                <a href=\"https://www.npmjs.com/package/puppeteer\">\n                                                    <code>Pupetteer</code>\n                                                </a> initiates, and navigates to the URL provided. A record is kept of all external\n                                                requests made by the webpage.\n                                                <a href=\"https://www.npmjs.com/package/puppeteer\">\n                                                    <code>Pupetteer</code>\n                                                </a> also executes JS on the page to grab all inline styles from the page.</p>\n                                            <pre><code class=\"language-javascript\">\nlet assets = await launchBrowser(url).catch(err =>\n    logError(err, 'launchBrowser')\n);\n                                                 </code></pre>\n                                        </li>\n                                        <li>\n                                            <p>All style sheets are then requested by us, and concatinated together in the appropriate\n                                                order.\n                                            </p>\n                                            <pre><code class=\"language-javascript\">\nlet clientCss = await getCSS(assets.stylesheet).catch(err =>\n    logError(err, 'getCss')\n);\nlet bundledCss = bundleCss(clientCss, assets.inlineStyles);\n                                               </code></pre>\n                                        </li>\n                                        <li>\n                                            <p>We use Node's file system module to write the file to disk.</p>\n                                            <pre><code class=\"language-javascript\">\nprintCss(bundledCss, progressBar);\n                                                                                                   </code></pre>\n                                        </li>\n                                    </ol>\n                                </div>\n                            </li>\n                            <li id=\"onbrandUtilityFunctions-docs\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Utility Functions</h4>\n                                    <p class=\"content\">\n                                        The repository for the library which houses various reusable fuctions that make Onbranding a hub much easier, and eliminates\n                                        various bugs. Also contains various SCSS functions.\n                                    </p>\n                                    <a href=\"http://cihost.uberflip.com/docs/\" class=\"block\">Auto-generated Documentation</a>\n                                    <p class=\"title is-5\">A Short list of available functions, with descriptions and use-cases:</p>\n                                    <ul>\n                                        <li>\n                                            <p>\n                                                <a href=\"http://cihost.uberflip.com/docs/#getstreamclass\">getStreamClass</a> simply returns the current page's stream class, or false\n                                                if it doesn't have one.</p>\n                                            <pre><code class=\"language-javascript\">\nconst stream = getStreamClass();\nconsole.log(stream) // 'stream-xxxxxx' or false\n                                                                                                        </code></pre>\n                                        </li>\n                                        <li>\n                                            <p>\n                                                <a href=\"http://cihost.uberflip.com/docs/#recoenginepositioning\">recoEnginePositioning</a> will stick make the reco engine sticky to whatever\n                                                selector you supply this function. This prevents the diffult \"glitchy\" behaviour,\n                                                which leaves a gap on scroll, and helps make the injected-header look more\n                                                natural.\n                                            </p>\n                                            <pre><code class=\"language-javascript\">\nHubs.Events.on('scroll', function(){\n    recoEnginePositioning('.top-nav'); // keep the reco engine with the top-nav \n})                                     // until it hits the top of the page.\n                                                                                                            </code></pre>\n                                        </li>\n                                        <li>\n                                            <p>\n                                                <a href=\"http://cihost.uberflip.com/docs/#doiftag\" class=\"bold\">doIfTag</a>\n                                                &\n                                                <a href=\"http://cihost.uberflip.com/docs/#doiftagregex\" class=\"bold\">doIfTagRegex</a> are functions to apply logic based on the pressence of a\n                                                tag on a tile. It is possible these two functions could be combined into\n                                                one smarter function. They each take a \"tag\" as the first argument, as either\n                                                a string or a regular expression. the second and thrid arguments are functions\n                                                you supply to execute if the tag was preasent or not. EX:\n                                            </p>\n                                            <pre><code class=\"language-javascript\">\ndoIfTag('tagName', function(){\n    // turn the label of all tiles tagged with \"tagName\" to \"I'm tagged!\"\n    $(this).find('a.view').text('I\\'m tagged!');\n}, function(){\n    //remove all tiles that do not have the tag \"tagName\"\n    $(this).remove();\n})\n                                                    </code></pre>\n                                            <p>Additionally, if you need to ensure that your code is not run more than once\n                                                per tile (maybe you're calling it on loadAdditionalItems?) you can provide\n                                                an additional argument, which is a string representing a class to exclude\n                                                from the loop. EX:\n                                            </p>\n                                            <pre><code class=\"language-javascript\">\ndoIfTag('tagName', function(){\n    // turn the label of all tiles tagged with \"tagName\" to \"I'm tagged!\"\n    $(this).find('a.view').text('I\\'m tagged!');\n\n    // we add 'someClassName' so that this function\n    // won't fire on this tile again.\n    $(this).addClass('someClassName');\n}, function(){\n    //remove all tiles that do not have the tag \"tagName\"\n    $(this).remove();\n\n    // we add 'someClassName' so that this function\n    // won't fire on this tile again.\n    $(this).addClass('someClassName');\n}, 'someClassName') // we pass 'someClassName' as the last \n                    // argument, telling doIfTag not to run on \n                    // any tile with this class.\n                                             </code></pre>\n                                             <p>\n                                                    <a href=\"http://cihost.uberflip.com/docs/#doiftag\" class=\"bold\">removeClasses</a>\n                                                   \n                                                </p>\n                                                <pre><code class=\"language-javascript\">\n    doIfTag('tagName', function(){\n        // turn the label of all tiles tagged with \"tagName\" to \"I'm tagged!\"\n        $(this).find('a.view').text('I\\'m tagged!');\n    }, function(){\n        //remove all tiles that do not have the tag \"tagName\"\n        $(this).remove();\n    })\n                                                        </code></pre>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </li>\n                            <li id=\"onbrandLocalDevelopmentFrameworks-docs\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">The Webpack Framework</h4>\n                                    <p class=\"content\">\n                                        The local development framework which uses webpack for its build process, as well as browsersync for its hub-proxy.\n                                    </p>\n                                    <p class=\"title is-5\">Getting the hub local:</p>\n                                    <p class=\"is-6\">Getting the hub proxied onto a local machine was easy, but getting it to work right was\n                                        tricky. Here is a brief explaination of how it works.\n                                    </p>\n                                    <ul>\n                                        <li>\n                                            <p>\n                                                <span class=\"bold\">The development server:</span> The server is actually a webpack server, proxying\n                                                the hub, and a browsersync server proxying the webpack server. This is done\n                                                to get the best of both worlds. Webpack is substantially faster at building\n                                                when running a server, as it will store and serve assets from memory rather\n                                                than the harddrive. Browsersync makes it easy to auto-reload/inject changed\n                                                styles, and to serve your local content to other devices on the same network.\n                                                This lets us show coachs our work, or test on mobile devices.</p>\n                                            <pre><code class=\"language-javascript\">\nfunction browserSyncInit() {\n    browserSync({\n        proxy: {\n            target: devOptions.fullHubUrl\n        },\n        serveStatic: ['.'],\n        files: [\n            './build/**/*.js',\n            './build/**/*.css',\n            './build/**/*.map',\n            './includes/**/*.html'\n        ]\n    });\n    browserSyncOn = true;\n}\n                                                     </code></pre>\n                                        </li>\n                                        <li>\n                                            <p>\n                                                <span class=\"bold\">Page Changes:</span> The hub is a single page application, which means it\n                                                does not actually change pages when you click a link. Instead, it manipulates\n                                                browser history and the content of the page with javascript. When proxied,\n                                                none of this works.\n                                            </p>\n                                            <p>To get our local environment, the\n                                                <a href=\"http://cihost.uberflip.com/docs/#_relativelinks\">_relativelinks</a> and\n                                                <a href=\"http://cihost.uberflip.com/docs/#_internallink\">_internallink</a> are used. These functions deconstruct all links on every\n                                                page of a locally hosted hub, and remove all the javascript accociated with\n                                                them. They then add in javascript to change the page on click, and manually\n                                                trigger the on page change event. This means for an outside observer, the\n                                                hub appears to work almost exactly the same as a live hub, but really it\n                                                is performing a full page load instead of ajaxing in the new page. Importantly\n                                                however, the code you write for pageChanges behaves as it would in live,\n                                                allowing us to develop normally.</p>\n                                        </li>\n                                        <li>\n                                            <p>\n                                                <span class=\"bold\">The Snippets:</span> Getting the hub to load in local assets is as simple\n                                                as using a relative path on the links you add to the backed of the hub. Changing\n                                                the links back and forth to switch from local to production was a big hassle\n                                                though, so using some simple conditionals and a query string, we teach the\n                                                hub how to tell where to look for it's onbrand files:\n                                            </p>\n                                            <pre><code class=\"language-html\">\n&lt;style&gt;\n/** =-=-= DEVELOPMENT =-=-= **/\n/** \n    *  onBrand CSS &ndash; WARNING: Do not remove code block below.\n    */\n&lt;/style&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css&quot;&gt;\n&lt;script&gt;\n        var url = window.location.href;\n    window.hasOnbrand = false;\n\n    if (url.indexOf('?onbrand') != -1) {\n        window.hasOnbrand = true;\n    } else if (url.indexOf('&amp;onbrand') != -1) {\n        window.hasOnbrand = true;\n    } else {\n        window.hasOnbrand = false;\n    }\n&lt;/script&gt;\n&lt;script id=&quot;onbrand__styles--script&quot;&gt;//&lt;![CDATA[\n    if(window.hasOnbrand){\n            document.write(&quot;&lt;link id=\\&quot;onbrand__styles\\&quot; rel=\\&quot;stylesheet\\&quot; href=\\&quot;\\/build/style.css\\&quot;&gt;&quot;);\n    } else {\n        document.write(&quot;&lt;link id=\\&quot;onbrand__styles\\&quot; rel=\\&quot;stylesheet\\&quot; href=\\&quot;\\/\\/cihost.uberflip.com/${cihostFolder}/build/style.css\\&quot;&gt;&quot;);\n    }\n//]]&gt;&lt;/script&gt;\n&lt;style&gt;\n/* Add your CSS rules below */\n&lt;/style&gt;\n                                            </code></pre>\n                                            <p>The above code snippet is in the head of the document, ensuring that we can check\n                                                at any point of the document which file we should load. Then, we simply either\n                                                load a asset from cihost, or one from our local machine (relative path).\n                                            </p>\n                                        </li>\n                                        <li>\n                                            <p>\n                                                <span class=\"bold\">The Rest:</span> the rest of the webpack build is build related - the config\n                                                uses sass-loader and post-css for our styles, and babel for our JS. The folder\n                                                structure is based on Nick Roamer's for familiariy.</p>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </li>\n                            <li id=\"onbrandProjectGenerator-docs\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Project Generator</h4>\n                                    <p class=\"content\">\n                                        This is the repository for the program which runs on cihost when you use the command \"generate\". It builds projects based\n                                        on what is in it's \"templates\" folder, which is typically the frameworks found in\n                                        the\n                                        <a href=\"https://github.com/mwilkins91/onbrand-generator\">local development frameworks</a>.\n                                    </p>\n                                    <a href=\"https://github.com/mwilkins91/onbrand-generator\" class=\"block\">Documentation</a>\n                                </div>\n                            </li>\n                            <li id=\"onbrandSlackBot-docs\" class=\"card\">\n                                <div class=\"card-content\">\n                                    <h4 class=\"title is-3\">Onbrand Slack Bot</h4>\n                                    <p class=\"content\">\n                                        This is the repository for the onbrand Slackbot, which announces the fire marshal every morning, and it's associated website.\n                                        The repo is set to private to protect the api-keys.\n                                    </p>\n                                    <a href=\"https://github.com/mwilkins91/onbrand-firemarshal\" class=\"block\">Documentation</a>\n                                    <a href=\"http://cihost.uberflip.com/fire/\" class=\"block\">Scheduling Website</a>\n                                </div>\n                            </li>\n                        </ul>\n                    </article>\n                </main>\n            </section>\n        </div>\n    </section>\n\n    <script src=\"/dist/marksOnbrandStuff.js\"></script>\n</body>\n\n</html>"},"hash":"ffde7fba4188ac87ef18f7d5ce2c15f1","cacheData":{}}